{"version":3,"sources":["assets/plots/NMBM2.M0.T0.similarity_overlap.png","assets/plots/NMBM2.M0.T0.upperlower_similarity_overlap.png","assets/plots/NMBM2.M0.T0.similarity_similarity.png","assets/plots/NMBM2.M0.T0.upperlower_similarity_similarity.png","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","className","initializeIcons","App","imageProps","width","maximizeFrame","data1","layout","data2","window","innerWidth","height","innerHeight","autosize","Fabric","dir","Navbar","Pivot","style","textAlign","PivotItem","headerText","itemIcon","Label","Image","Object","assign","src","data1plot1","alt","data1plot2","react_plotly_default","data","data2plot1","data2plot2","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6248724a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NMBM2.M0.T0.similarity_overlap.6c57fd1c.png\";","module.exports = __webpack_public_path__ + \"static/media/NMBM2.M0.T0.upperlower_similarity_overlap.b5270d1b.png\";","module.exports = __webpack_public_path__ + \"static/media/NMBM2.M0.T0.similarity_similarity.e4815431.png\";","module.exports = __webpack_public_path__ + \"static/media/NMBM2.M0.T0.upperlower_similarity_similarity.6ae750dc.png\";","import React from 'react';\nimport './styles/NavBar.css';\n\nconst NavBar = () => (\n    <div className=\"NavBar\">\n        <div className=\"logo ms-font-xl\">\n            <strong>miRNA binding site alignment</strong>\n        </div>\n    </div>\n);\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport data1 from './assets/networks/B2M0Similarity.json';\nimport data2 from './assets/networks/overlap.json'; //import data2 from './assets/networks/B2M0overlap.json';\nimport Plot from 'react-plotly.js';\n\nimport data1plot1 from './assets/plots/NMBM2.M0.T0.similarity_similarity.png';\nimport data1plot2 from './assets/plots/NMBM2.M0.T0.upperlower_similarity_similarity.png';\nimport data2plot1 from './assets/plots/NMBM2.M0.T0.similarity_overlap.png';\nimport data2plot2 from './assets/plots/NMBM2.M0.T0.upperlower_similarity_overlap.png';\n\nimport { PivotItem, IPivotItemProps, Pivot } from 'office-ui-fabric-react/lib/Pivot';\nimport { Image } from 'office-ui-fabric-react/lib/Image';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\n\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\nimport './styles/fabric.min.css';\nimport NavBar from './Navbar.js';\n\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\n\ninitializeIcons(/* optional base url */);\n\nclass App extends React.Component {\n    render() {\n        const imageProps = {\n            width: 350,\n            maximizeFrame: true,\n        };\n        data1.layout.width = data2.layout.width = window.innerWidth * (3 / 5);\n        data1.layout.height = data2.layout.height = window.innerHeight * (9 / 10);\n        data1.layout.autosize = data2.layout.autosize = false;\n        return (\n            <Fabric className=\"App\">\n                <div className=\"ms-Grid\" dir=\"ltr\">\n                    <div className=\"ms-Grid-row\">\n                        <NavBar />\n                    </div>\n                    <br />\n                    <div className=\"ms-Grid-row\">\n                        <div className=\"ms-Grid-col ms-sm12 ms-md12 ms-lg12\">\n                            <Pivot style={{ textAlign: 'center' }}>\n                                <PivotItem headerText={'mature miRNA name identifier similarity'} itemIcon=\"BarChart4\">\n                                    <div className=\"ms-Grid-col ms-sm3 ms-md3 ms-lg3\">\n                                        <Label>miRNA vs utr alignment</Label>\n                                        <Image src={data1plot1} {...imageProps} alt=\"Example implementation with no image fit property and no height or width is specified.\" />\n                                        <br />\n                                        <Label>miRNA vs utr alignment only upper lower values</Label>\n                                        <Image src={data1plot2} {...imageProps} alt=\"Example implementation with no image fit property and no height or width is specified.\" />\n                                        <Label>\n                                            X-axis: miRNA similarity <br />\n                                            Y-axis: utr similarity <br />\n                                        </Label>\n                                    </div>\n                                    <div className=\"ms-Grid-col ms-sm9 ms-md9 ms-lg9\">\n                                        <Plot data={data1.data} layout={data1.layout} />\n                                    </div>\n                                </PivotItem>\n                                <PivotItem headerText={'mature miRNA name identifier overlap'} itemIcon=\"BarChart4\">\n                                    <div className=\"ms-Grid-col ms-sm3 ms-md3 ms-lg3\">\n                                        <Label>miRNA vs utr alignment</Label>\n                                        <Image src={data2plot1} {...imageProps} alt=\"Example implementation with no image fit property and no height or width is specified.\" />\n                                        <br />\n                                        <Label>miRNA vs utr alignment only upper lower values</Label>\n                                        <Image src={data2plot2} {...imageProps} alt=\"Example implementation with no image fit property and no height or width is specified.\" />\n                                        <Label>\n                                            X-axis: miRNA overlap <br />\n                                            Y-axis: utr similarity <br />\n                                        </Label>\n                                    </div>\n                                    <div className=\"ms-Grid-col ms-sm9 ms-md9 ms-lg9\">\n                                        <Plot data={data2.data} layout={data2.layout} />\n                                    </div>\n                                </PivotItem>\n                                <PivotItem headerText={'mature miRNA name identifier overlap'} itemIcon=\"BarChart4\">\n                                    <div className=\"ms-Grid-col ms-sm3 ms-md3 ms-lg3\">\n                                        <Label>miRNA vs utr alignment</Label>\n                                        <Image src={data2plot1} {...imageProps} alt=\"Example implementation with no image fit property and no height or width is specified.\" />\n                                        <br />\n                                        <Label>miRNA vs utr alignment only upper lower values</Label>\n                                        <Image src={data2plot2} {...imageProps} alt=\"Example implementation with no image fit property and no height or width is specified.\" />\n                                        <Label>\n                                            X-axis: miRNA overlap <br />\n                                            Y-axis: utr similarity <br />\n                                        </Label>\n                                    </div>\n                                    <div className=\"ms-Grid-col ms-sm9 ms-md9 ms-lg9\">{/* <Plot data={data2.data} layout={data2.layout} /> */}</div>\n                                </PivotItem>\n                                <PivotItem headerText={'mature miRNA name identifier overlap'} itemIcon=\"BarChart4\">\n                                    <div className=\"ms-Grid-col ms-sm3 ms-md3 ms-lg3\">\n                                        <Label>miRNA vs utr alignment</Label>\n                                        <Image src={data2plot1} {...imageProps} alt=\"Example implementation with no image fit property and no height or width is specified.\" />\n                                        <br />\n                                        <Label>miRNA vs utr alignment only upper lower values</Label>\n                                        <Image src={data2plot2} {...imageProps} alt=\"Example implementation with no image fit property and no height or width is specified.\" />\n                                        <Label>\n                                            X-axis: miRNA overlap <br />\n                                            Y-axis: utr similarity <br />\n                                        </Label>\n                                    </div>\n                                    <div className=\"ms-Grid-col ms-sm9 ms-md9 ms-lg9\">{/*  */}</div>\n                                </PivotItem>\n                            </Pivot>\n                        </div>\n                    </div>\n                </div>\n                <div />\n            </Fabric>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}